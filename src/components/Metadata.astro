---
import type { ImageMetadata } from "astro";

export type OGImage = {
  image: ImageMetadata;
  alt?: string;
};

export type AlternateLocaleLinks = {
  [lang: string]: string;
};

export type StructuredData = {
  "@context": string;
  "@type": string;
  [key: string]: unknown;
};

export type Favicon = {
  image: ImageMetadata;
  maskColor?: string;
}

export type Props = {
  title: string;
  site: string;
  description?: string;
  ogImage?: OGImage;
  author?: string;
  canonicalURL?: string | URL;
  locale?: string;
  alternateLocaleLinks?: AlternateLocaleLinks;
  structuredData?: StructuredData;
  favicon?: Favicon;
  themeColor?: string;
  colorScheme?: string;
  extend?: {
    meta?: { name: string; content: string }[];
  };
  webAppManifestPath?: string;
};
const props = Astro.props;

const canonicalUrl =  (typeof props.canonicalURL === "string" ? new URL(props.canonicalURL) : props.canonicalURL) ?? Astro.url;
---

<!-- Structured Data: Used by search engines to better understand page content -->
{
  props.structuredData && <script is:inline type="application/ld+json" set:html={JSON.stringify(props.structuredData)} />
}

<!-- Essential Meta Tags: Basic page information and SEO -->
<title>{props.title}</title>
<meta charset="utf-8" />
<meta name="title" content={props.title} />
<meta name="robots" content="index,follow" />
<meta name="generator" content={Astro.generator} />

<!-- Security Headers: Protect against common web vulnerabilities -->
<meta http-equiv="X-Content-Type-Options" content="nosniff" />
<meta http-equiv="X-XSS-Protection" content="1; mode=block" />
<meta http-equiv="Referrer-Policy" content="strict-origin-when-cross-origin" />
<meta name="referrer" content="strict-origin-when-cross-origin" />

{
  props.description && <meta name="description" content={props.description} />
}
{
  props.author && <meta name="author" content={props.author} />
}
<meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=5.0, minimum-scale=1.0" />
<meta http-equiv="X-UA-Compatible" content="ie=edge" />
<link rel="canonical" href={canonicalUrl.toString()} />

<!-- Alternate Languages: Support for multilingual sites -->
 {
  props.alternateLocaleLinks &&
  Object.entries(props.alternateLocaleLinks).map(([lang, href]) => (
    <link rel="alternate" href={href} hreflang={lang}/>
  ))
 }

<!-- Social Media Cards: Open Graph and Twitter -->
<meta property="og:url" content={canonicalUrl.toString()} />
<meta property="og:title" content={props.title} />
<meta property="og:site_name" content={props.site} />
{props.site && <meta property="og:site_name" content={props.site} />}
{
  props.description && <meta property="og:description" content={props.description} />
}
<meta property="og:type" content="website" />
{props.locale && <meta property="og:locale" content={props.locale} />}
 {
  props.ogImage && (
    <>
      <meta property="og:image" content={props.ogImage.image.src} />
      <meta property="og:image:width" content={props.ogImage.image.width.toString()}/>
      <meta property="og:image:height" content={props.ogImage.image.height.toString()}/>
      <meta property="og:image:type" content={props.ogImage.image.format}/>
    </>
  )
 }

<!-- Twitter Meta Tags -->
<meta name="twitter:title" content={props.title} />
{canonicalUrl && <>
  <meta property="twitter:domain" content={canonicalUrl.hostname} />
  <meta property="twitter:url" content={canonicalUrl.toString()} />
</>}
{
  props.description && <meta name="twitter:description" content={props.description} />
}
{
  props.ogImage && <>
    <meta name="twitter:card" content="summary_large_image" />
    <meta name="twitter:image" content={props.ogImage.image.src} />
    <meta name="twitter:image:alt" content={props.ogImage.alt ?? props.title} />
  </>
}

<!-- Progressive Web App Settings -->
{
  props.webAppManifestPath && <link rel="manifest" href={props.webAppManifestPath} />
}

<!-- Browser and Platform Specific Settings -->
<!-- Sitemap -->
<link rel="sitemap" href="/sitemap-index.xml" />

<!-- Favicons -->
 {
  props.favicon && (
    <>
      <link rel="shortcut icon" href={props.favicon.image.src} />
      <link rel="icon" href={props.favicon.image.src} type="image/svg+xml" />
      <link rel="mask-icon" href={props.favicon.image.src} color={props.favicon.maskColor} />
      <meta name="mobile-web-app-capable" content="yes" />
      <link rel="apple-touch-icon" href={props.favicon.image.src}  />
      <link rel="shortcut icon" href={props.favicon.image.src} />
    </>
  )
 }

<!-- Set theme color -->
{
  props.themeColor && (
    <>
      <meta name="theme-color" content={props.themeColor} />
      <meta name="msapplication-TileColor" content={props.themeColor} />
    </>
  )
}

{props.colorScheme && <meta name="color-scheme" content={props.colorScheme} />}

<!-- Inject any additional meta tags -->
{
  props.extend?.meta && props.extend.meta.map((meta) => (
    <meta name={meta.name} content={meta.content} />
  ))
}